---
import Container from "@components/Container.astro";
import { SITE, SOCIALS } from "@consts";
import BackToTop from "@components/BackToTop.astro";
import Link from "@components/Link.astro";
import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';
import { 
  faXTwitter, 
  faInstagram, 
  faTiktok, 
  faSpotify, 
  faApple,
  faYoutube 
} from '@fortawesome/free-brands-svg-icons';

const currentYear = new Date().getFullYear();
---

<footer class="animate">
  <Container>
    <div class="relative">
      <div class="absolute right-0 -top-20">
        <BackToTop />
      </div>
    </div>
    <div class="flex justify-between items-center">
      <div class="flex items-center gap-4">
        <p class="mb-2 text-sm">
          &copy; {currentYear}. All rights reserved.
        </p>
        <div class="flex gap-2">
          {SOCIALS.map(SOCIAL => (
            <Link 
              href={SOCIAL.HREF} 
              external 
              aria-label={`${SITE.NAME} on ${SOCIAL.NAME}`} 
              className="hover:scale-110 transition-transform"
            >
              {SOCIAL.NAME === 'twitter-x' && (
                <FontAwesomeIcon icon={faXTwitter} className="h-5 w-5" />
              )}
              {SOCIAL.NAME === 'instagram' && (
                <FontAwesomeIcon icon={faInstagram} className="h-5 w-5" />
              )}
              {SOCIAL.NAME === 'tiktok' && (
                <FontAwesomeIcon icon={faTiktok} className="h-5 w-5" />
              )}
              {SOCIAL.NAME === 'spotify' && (
                <FontAwesomeIcon icon={faSpotify} className="h-5 w-5" />
              )}
              {SOCIAL.NAME === 'music' && (
                <FontAwesomeIcon icon={faApple} className="h-5 w-5" />
              )}
              {SOCIAL.NAME === 'youtube' && (
                <FontAwesomeIcon icon={faYoutube} className="h-5 w-5" />
              )}
            </Link>
          ))}
        </div>
      </div>
      <div class="flex flex-wrap gap-1 items-center">
        <button
          id="light-theme-button"
          aria-label="Light theme"
          class="group size-8 flex items-center justify-center rounded-full"
        >
          <svg
            xmlns="http://www.w3.org/2000/svg"
            width="18"
            height="18"
            viewBox="0 0 24 24"
            fill="none"
            stroke="currentColor"
            stroke-width="1.5"
            stroke-linecap="round"
            stroke-linejoin="round"
            class="group-hover:stroke-black group-hover:dark:stroke-white transition-colors duration-300 ease-in-out"
          >
            <circle cx="12" cy="12" r="5"></circle>
            <line x1="12" y1="1" x2="12" y2="3"></line>
            <line x1="12" y1="21" x2="12" y2="23"></line>
            <line x1="4.22" y1="4.22" x2="5.64" y2="5.64"></line>
            <line x1="18.36" y1="18.36" x2="19.78" y2="19.78"></line>
            <line x1="1" y1="12" x2="3" y2="12"></line>
            <line x1="21" y1="12" x2="23" y2="12"></line>
            <line x1="4.22" y1="19.78" x2="5.64" y2="18.36"></line>
            <line x1="18.36" y1="5.64" x2="19.78" y2="4.22"></line>
          </svg>
        </button>
        <button
          id="dark-theme-button"
          aria-label="Dark theme"
          class="group size-8 flex items-center justify-center rounded-full"
        >
          <svg
            xmlns="http://www.w3.org/2000/svg"
            width="18"
            height="18"
            viewBox="0 0 24 24"
            fill="none"
            stroke="currentColor"
            stroke-width="1.5"
            stroke-linecap="round"
            stroke-linejoin="round"
            class="group-hover:stroke-black group-hover:dark:stroke-white transition-colors duration-300 ease-in-out"
          >
            <path d="M21 12.79A9 9 0 1 1 11.21 3 7 7 0 0 0 21 12.79z"></path>
          </svg>
        </button>
        <button
          id="system-theme-button"
          aria-label="System theme"
          class="group size-8 flex items-center justify-center rounded-full"
        >
          <svg
            xmlns="http://www.w3.org/2000/svg"
            width="18"
            height="18"
            viewBox="0 0 24 24"
            fill="none"
            stroke="currentColor"
            stroke-width="1.5"
            stroke-linecap="round"
            stroke-linejoin="round"
            class="group-hover:stroke-black group-hover:dark:stroke-white transition-colors duration-300 ease-in-out"
          >
            <rect x="2" y="3" width="20" height="14" rx="2" ry="2"></rect>
            <line x1="8" y1="21" x2="16" y2="21"></line>
            <line x1="12" y1="17" x2="12" y2="21"></line>
          </svg>
        </button>
      </div>
    </div>
  </Container>
</footer>

<script>
  const lightButton = document.querySelector('#light-theme-button');
  const darkButton = document.querySelector('#dark-theme-button');
  const systemButton = document.querySelector('#system-theme-button');

  const theme: string | null = (() => {
    if (typeof localStorage !== 'undefined' && localStorage.getItem('theme')) {
      return localStorage.getItem('theme');
    }
    if (window.matchMedia('(prefers-color-scheme: dark)').matches) {
      return 'dark';
    }
    return 'light';
  })();

  if (theme === 'light') {
    document.documentElement.classList.remove('dark');
  } else {
    document.documentElement.classList.add('dark');
  }

  window.localStorage.setItem('theme', theme || 'light');

  const handleToggleClick = (theme: 'light' | 'dark' | 'system') => {
    const element = document.documentElement;
    switch (theme) {
      case 'light':
        element.classList.remove('dark');
        localStorage.setItem('theme', 'light');
        break;
      case 'dark':
        element.classList.add('dark');
        localStorage.setItem('theme', 'dark');
        break;
      default:
        if (window.matchMedia('(prefers-color-scheme: dark)').matches) {
          element.classList.add('dark');
        } else {
          element.classList.remove('dark');
        }
        localStorage.removeItem('theme');
    }
  };

  lightButton?.addEventListener('click', () => handleToggleClick('light'));
  darkButton?.addEventListener('click', () => handleToggleClick('dark'));
  systemButton?.addEventListener('click', () => handleToggleClick('system'));
</script>